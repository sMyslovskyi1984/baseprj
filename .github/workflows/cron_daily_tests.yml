name: Run daily DSC tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 1 * * 1-5"

permissions: write-all

jobs:
  executeTests:
    runs-on: self-hosted
    steps:
      - name: Camunda restart
        run: curl https://oysmfpy2fookwr2tkflfaiwbha0ioqed.lambda-url.us-west-2.on.aws/
      - name: FIX perms
        run: sudo chown ubuntu:ubuntu -R /home/ubuntu
      - name: Checkout
        uses: actions/checkout@v3
      - name: Print Java version (pre-installed in Github Actions Runner)
        run: java --version
      - name: Print mvn version (pre-installed in Github Actions Runner)
        run: mvn --version
      - name: Print Google Chrome version (pre-installed in Github Actions Runner)
        run: |
          google-chrome --version
          google-chrome-stable --version
      - name: Run tests
        id: tests
        env:
          DEFAULT_USER: ${{ secrets.DEFAULT_USER }}
          DEFAULT_USER_PASSWORD: ${{ secrets.DEFAULT_USER_PASSWORD }}
          SERVICE_BUS_USER: ${{ secrets.SERVICE_BUS_USER_NAME }}
          SERVICE_BUS_USER_PASSWORD: ${{ secrets.SERVICE_BUS_USER_PASSWORD }}
          DMD_HIBERNATE_PASSWORD: ${{ secrets.DMD_HIBERNATE_PASSWORD }}
          GCDM_HIBERNATE_PASSWORD: ${{ secrets.GCDM_HIBERNATE_PASSWORD }}
          S3_USER: ${{ secrets.S3_USER_NAME }}
          S3_SECRET: ${{ secrets.S3_SECRET_KEY }}
        run: |
              echo "test_output=$(mvn clean test -fn -Dsuite=e2e -Denv=staging -Dheadless=true -Dpersistence_unit=remote 2>&1 | grep -o "Tests run: [0-9]*, Failures: [0-9]*, Errors: [0-9]*, Skipped: [0-9]*" | head -n 1)" >> "$GITHUB_OUTPUT"

      - name: Extract test results
        id: extract_results
        run: |
          tests_run_line=$(echo "${{ steps.tests.outputs.test_output }}" | grep -o "Tests run: [0-9]*, Failures: [0-9]*, Errors: [0-9]*, Skipped: [0-9]*" | head -n 1) >> "$GITHUB_OUTPUT"
          echo "tests_run_line=$tests_run_line" >> "$GITHUB_OUTPUT"
          echo "${{ steps.tests.outputs.test_output }}"

      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
         ref: gh-pages
         path: gh-pages

      - name: Generate allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 100

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report

      - name: Deploy report to Github Pages
        uses: peaceiris/actions-gh-pages@v3.9.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-history

      - name: Prepare slack message
        id: message
        if: ${{ success() }}
        run: |
          tests_run_line="${{ steps.extract_results.outputs.tests_run_line }}"
          echo "${{ steps.extract_results.outputs.tests_run_line }}"
          if [ -n "$tests_run_line" ]; then
            failures=$(echo "$tests_run_line" | grep -o "Failures: [0-9]*" | cut -d' ' -f2)
            errors=$(echo "$tests_run_line" | grep -o "Errors: [0-9]*" | cut -d' ' -f2)
            skipped=$(echo "$tests_run_line" | grep -o "Skipped: [0-9]*" | cut -d' ' -f2)
            if [ "$failures" == "0" ] && [ "$errors" == "0" ] && [ "$skipped" == "0" ]; then
              slack_message=":large_green_circle: All tests passed! $tests_run_line \n Report can be found here https://wmgtech.github.io/dsc-autotests"
            else
              slack_message=":red_circle: Tests failed! $tests_run_line \n Report can be found here https://wmgtech.github.io/dsc-autotests"
            fi
          else
            slack_message=":red_circle: Unable to extract test results."
          fi
          echo "slack_message=$slack_message" >> "$GITHUB_OUTPUT"

      - name: Notify about smoke test fail on Slack
        if: always()
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.message.outputs.slack_message }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK